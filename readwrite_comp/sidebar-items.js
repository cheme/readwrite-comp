initSidebarItems({"enum":[["CompRState",""],["CompWState",""]],"fn":[["new_multir",""],["new_multiw",""]],"struct":[["CompExtR",""],["CompExtRInner","Inner construct to build a read upon another one, do not use as write if you need automatic header or automatic end (technical)."],["CompExtW","Compose two ExtWrite in a single on with Owned ExtWrite. EW1 apply over EW2 meaning that EW2 is the external layer (ew2 header written first without applying ew1 over it and ew2 end written last without ew1 written over it and content written by first applying ew2 then ew1."],["CompExtWInner","inner struct for implemention just to apply method of sw in write This is not to be use directly as write but just to use write_into and flush_into"],["CompR","Base construct to build a read upon another one (composable reader)."],["CompW","Base construct to build a write upon another one (composable writer), using an ExtWrite implementation."],["MultiRExt",""],["MultiWExt",""]],"trait":[["ExtRead","Compose over a reader with additional possibility to read an end content"],["ExtWrite","Write with further common functionnalities."]],"type":[["MultiR","Multiple layered read (similar to MCompW)."],["MultiW","CompW with several (undefined number at compile time) Write of same kind to chain, and a dest write. Drop semantic for use as write cannot be enable (inner temporary use of MCompW would write_end at each write). This could be use for layered write (for example in a multilayer ssl tunnel)."]]});